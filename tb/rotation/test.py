#!bin/pythion3
#
# MIT License
#
# Copyright (c) 2024 Dmitriy Nekrasov
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#
# ---------------------------------------------------------------------------------
#
# Top-level program template. Altough it is also could be wrapped up to run
# automatically in a cycle through variating set of parameters. It requires some
# modifications anyway to fit your project.
#
# -- Dmitry Nekrasov <bluebag@yandex.ru> Thu, 21 Mar 2024 21:05:25 +0300
#

import numpy as np
import sys
import os
import subprocess
cwd = os.getcwd()
model_path = '/../../models/'
sys.path.append( cwd + model_path )
from common_functions import generate_atan_table
from common_functions import calculate_k
from rotation         import rotation_int_model

############################################################################
# Test parameters (example)

# Mandatory parameters
N              = 16
DW             = 16
AW             = DW
KW             = AW
K              = calculate_k( N, KW )
CLK_PER_SAMPLE = 1
TESTBENCH_MODE = ( "manual", "automatic" )[1]
INPUT_X_FNAME  = "input_x.txt"
INPUT_Y_FNAME  = "input_y.txt"
INPUT_Z_FNAME  = "input_z.txt"
REF_X_FNAME    = "ref_x.txt"
REF_Y_FNAME    = "ref_y.txt"

# Could be static if project has fixed RTL files set
RTL_SOURCES = [
  '../../rtl/sat.sv',
  '../../rtl/cordic_step.sv',
  '../../rtl/rotation.sv'
]

############################################################################
# Translate config to verilog

f = open( "parameters.v", "w" )
f.write(f"parameter N              = {N};\n")
f.write(f"parameter DW             = {DW};\n")
f.write(f"parameter AW             = {AW};\n")
f.write(f"parameter KW             = {KW};\n")
f.write(f"parameter K              = {K};\n")
f.write(f'parameter CLK_PER_SAMPLE = {CLK_PER_SAMPLE};\n')
f.write(f'parameter INPUT_X_FNAME  = "{INPUT_X_FNAME}";\n')
f.write(f'parameter INPUT_Y_FNAME  = "{INPUT_Y_FNAME}";\n')
f.write(f'parameter INPUT_Z_FNAME  = "{INPUT_Z_FNAME}";\n')
f.write(f'parameter REF_X_FNAME    = "{REF_X_FNAME}";\n')
f.write(f'parameter REF_Y_FNAME    = "{REF_Y_FNAME}";\n')
f.write(f'parameter TESTBENCH_MODE = "{TESTBENCH_MODE}";\n')
f.close()

f = open( "files", "w" )
for i in range(len(RTL_SOURCES)):
    f.write(f"{RTL_SOURCES[i]}\n")
f.close()

############################################################################
# Prepare test data

NVALS = 10000
atan = generate_atan_table( N, AW, "atan.vh" )
rng = np.random.default_rng()

min_val = -2**(DW-1)
max_val =  2**(DW-1)-1

x = np.zeros( NVALS, dtype=int )
y = np.zeros( NVALS, dtype=int )

cnt = 0
while( cnt < NVALS ):
    a = int(rng.uniform( min_val, max_val, 1))
    b = int(rng.uniform( min_val, max_val, 1))
    if( abs( complex( a, b ) ) <= max_val ):
        x[cnt] = a
        y[cnt] = b
        cnt += 1

z = np.array([ int(rng.uniform( 0, 2**(AW+2)-1, 1)) for i in range(NVALS) ])

# Reference data
xr = np.zeros_like( x )
yr = np.zeros_like( y )

for i in range( NVALS ):
    xr[i], yr[i] = rotation_int_model( x[i], y[i], z[i], atan, N, K, DW )

def wrire_tb_input_data( fname, values ):
    f = open( fname, "w")
    for i in range(len(values)):
        f.write( "%d\n" % values[i])
    f.close()

wrire_tb_input_data( INPUT_X_FNAME, x  )
wrire_tb_input_data( INPUT_Y_FNAME, y  )
wrire_tb_input_data( INPUT_Z_FNAME, z  )
wrire_tb_input_data( REF_X_FNAME,   xr )
wrire_tb_input_data( REF_Y_FNAME,   yr )

if( TESTBENCH_MODE == "automatic" ):
    run_vsim = "vsim -c -do make.tcl"
    vsim = subprocess.Popen( run_vsim.split(), stdout=subprocess.PIPE )
    res = vsim.communicate()
    print(res)
    try:
        f = open( "score.txt", "r" )
        score = f.readlines()[0][1:-2] # cut side { }
        f.close()
    except FileNotFoundError:
        score = "No score.txt were generated by make.tcl routine"
    f = open( "log", "a" )
    f.write("------------------------------------------------------------\n")
    f.write( f"Paramters: N = {N}, DW = {DW}, AW = {AW}\n")
    f.write( f"Results: {score}\n")
    f.close()
    # clean
    try:
        os.remove("parameters.v")
        os.remove("files")
        os.remove(INPUT_X_FNAME )
        os.remove(INPUT_Y_FNAME )
        os.remove(INPUT_Z_FNAME )
        os.remove(REF_X_FNAME   )
        os.remove(REF_Y_FNAME   )
        os.remove("atan.vh")
        os.remove("score.txt")
        os.remove("transcript")
        os.remove("vsim.wlf")
        import shutil
        shutil.rmtree( "work", ignore_errors=True )
    except FileNotFoundError:
        pass






